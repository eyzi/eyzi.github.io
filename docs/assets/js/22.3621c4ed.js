(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{410:function(a,s,t){"use strict";t.r(s);var e=t(54),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"camelcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#camelcase"}},[a._v("#")]),a._v(" camelCase")]),a._v(" "),t("p",[a._v("The most ubiquitous case style in the world of programming is the\ncamel case.")]),a._v(" "),t("p",[a._v("Imagine this: You are writing in lowercase and you have to type a group\nof words as a single keyword. You can't use space as it is used to\nseparate keywords. You also can't use symbols. What do you do?")]),a._v(" "),t("p",[a._v("Here's an idea: What if you use capitalization, not as emphasis as it\nis usually used for, but as word separator.")]),a._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[a._v("justLikeThis\n")])])]),t("p",[a._v("Problem solved.")]),a._v(" "),t("p",[a._v("Since programmers are often bound to the same constraints mentioned\nabove, especially when naming variables and function names, it's easy\nto imagine why programmers use it a lot, especially for variables and\nfunction names.")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("calculateAreaOfCircle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("radius")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"pascalcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pascalcase"}},[a._v("#")]),a._v(" PascalCase")]),a._v(" "),t("p",[a._v("A variation of the camel case except the first letter is also\ncapitalized. It sort of has the same effect as the\n"),t("a",{attrs:{href:"/case-styles/title-case"}},[a._v("title case")]),a._v(". As such, it is used when the\nkeyword needs to be distinct from the usual variable naming style, such\nas a class name.")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserAccount")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("In programming languages like C#, it is a convention to use pascal case\nfor variables in general. Consult your local tech lead to know when you\nshould be using pascal case.")]),a._v(" "),t("h2",{attrs:{id:"acronyms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#acronyms"}},[a._v("#")]),a._v(" Acronyms")]),a._v(" "),t("p",[a._v("We usually uppercase acronyms in a sentence, such as URL, HTTP, etc.\nAs such, people do so in camel case as well.")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseURLString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("While it's easy to make out that "),t("code",[a._v("URL")]),a._v(" is a single word here, you can\nimagine how difficult it is to make out when a word starts and ends.\nEspecially when it's a word you are unfamiliar with. And what happens\nwhen there are two acronyms?")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getHTTPAPIMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("request")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("I like to treat the entire string as lowercased, then capitalize the\nbeginning of each word, including acronmys. I just find it better to\nread that way.")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseUrlString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("url")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getHttpApiMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("request")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("This is obviously up to personal taste. Keeping acronyms all-caps in\ncamel case is perfectly acceptable. The "),t("em",[a._v("only")]),a._v(" acceptable way in some\nteams, even. Just remember the "),t("a",{attrs:{href:"/about/platinum-rule"}},[a._v("platinum rule")]),a._v(".")])])}),[],!1,null,null,null);s.default=n.exports}}]);