(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{396:function(e,s,n){"use strict";n.r(s);var t=n(54),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"files-and-folders"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#files-and-folders"}},[e._v("#")]),e._v(" Files and Folders")]),e._v(" "),n("p",[e._v("For the longest time, I have experimented on what's the best way to\nstructure my projects. There are still some things I am unsure of, but\nI have found some that has been working well for me.")]),e._v(" "),n("p",[e._v("As with "),n("a",{attrs:{href:"/naming-conventions/entities"}},[e._v("entities")]),e._v(", the rule for using\nplural nouns applies. A more specific resource should have a longer\naddress.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("src/modules/first-module\n")])])]),n("p",[e._v("I usually use "),n("a",{attrs:{href:"/case-styles/kebab-case"}},[e._v("kebab case")]),e._v(" for files and\nfolders.")]),e._v(" "),n("h2",{attrs:{id:"structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[e._v("#")]),e._v(" Structure")]),e._v(" "),n("p",[e._v("I have a lot of dummy projects, some of them are for code katas and\nsome of them I just created to test a concept. Most of them has a\nsimple structure, usually only having a single file.")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit A")]),e._v("\nğŸ“„ index.js\nğŸ“„ package.json\n")])])]),n("p",[e._v("It works for what it's used for. I don't really need to create, say,\nan "),n("code",[e._v("src")]),e._v(" folder if it will only have a single file inside and I'm not\nbuilding a distributable.")]),e._v(" "),n("p",[e._v("There's not a hard and fast rule I follow for when I start separating\nfiles into folders. I would say it really depends on how many things\na service is doing or how many data types it is dealing with.")]),e._v(" "),n("p",[e._v("For instance, the usual project folder I have for even the basic\ndesktop application made in Electron would have a separate folder for\nthe main process and renderer process. While you can compress them into\na single file when the scope of the project is tiny, it is doing\nvastly different things.")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit B")]),e._v("\nğŸ“‚ main\n  ğŸ“„ index.js\nğŸ“‚ renderer\n  ğŸ“„ index.js\nğŸ“„ app.js\nğŸ“„ package.json\n")])])]),n("h2",{attrs:{id:"domains"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#domains"}},[e._v("#")]),e._v(" Domains")]),e._v(" "),n("p",[e._v("When is it good to use "),n("code",[e._v("utils")]),e._v(" as a folder name?")]),e._v(" "),n("p",[e._v("Separating files by technical differences can eventually make it hard\nto traverse. It is organized "),n("em",[e._v("technically")]),e._v(" and it does make sense in\npractice, but our minds don't quite work that way.")]),e._v(" "),n("p",[e._v("Consider these two hypothetical examples")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit A")]),e._v("\nğŸ“‚ exes\n  ğŸ“‚ games\n    ğŸ“‚ minecraft\nğŸ“‚ jpgs\n  ğŸ“‚ business\n  ğŸ“‚ personal\n  ğŸ“‚ games\n    ğŸ“‚ screenshots\nğŸ“‚ pdfs\n  ğŸ“‚ business\n    ğŸ“‚ invoices\n  ğŸ“‚ personal\n    ğŸ“‚ files\n")])])]),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit B")]),e._v("\nğŸ“‚ business\n  ğŸ“‚ invoices\n  ğŸ“‚ photos\nğŸ“‚ games\n  ğŸ“‚ minecraft\n    ğŸ“‚ screenshots\nğŸ“‚ personal\n  ğŸ“‚ files\n  ğŸ“‚ photos\n")])])]),n("p",[e._v("How do we usually organize our files? Is it by file type like in\n"),n("code",[e._v("Exhibit A")]),e._v("? Or is it by domain like in "),n("code",[e._v("Exhibit B")]),e._v("? There is something\nnatural about grouping things together by relevance instead of\ntechnicalities.")]),e._v(" "),n("p",[e._v("I think that applies to programming structures, too. Granted there are\ndefinitely times when grouping by technicalities make sense, but when\nand where you do it is something you'll get a hang of as you make more\nprojects.")]),e._v(" "),n("p",[e._v("That said, using names like "),n("code",[e._v("utils")]),e._v(" for folders, or even files, is\nsomething you'd like to avoid whenever you can.")]),e._v(" "),n("p",[e._v("Let's take another step with another hypothetical example.")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit C")]),e._v("\nğŸ“‚ configs\n  ğŸ“„ database-config.php\n  ğŸ“„ server-config.php\nğŸ“‚ controllers\n  ğŸ“„ order-controller.php\n  ğŸ“„ user-controller.php\nğŸ“‚ models\n  ğŸ“„ order-model.php\n  ğŸ“„ user-model.php\nğŸ“‚ utils\n  ğŸ“„ database-utils.php\n  ğŸ“„ order-utils.php\n  ğŸ“„ server-utils.php\n  ğŸ“„ user-utils.php\nğŸ“‚ views\n  ğŸ“„ order-view.php\n  ğŸ“„ user-view.php\n")])])]),n("p",[e._v("Here we have a classic example of the MVC framework structure, which\nwas once a buzz in programming. And this only has two services: "),n("code",[e._v("user")]),e._v("\nand "),n("code",[e._v("order")]),e._v(". When you discover bugs, you can imagine how tedious it\nwould be going back and forth the files, especially when you're not\nfamiliar of what goes where.")]),e._v(" "),n("p",[e._v("Now here's the last hypothetical example. Something I would personally\nuse.")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Exhibit D")]),e._v("\nğŸ“‚ configs\n  ğŸ“„ server.js\n  ğŸ“„ database.js\nğŸ“‚ constants\n  ğŸ“„ server.js\n  ğŸ“„ database.js\nğŸ“‚ services\n  ğŸ“‚ common\n    ğŸ“‚ datetime\n      ğŸ“„ parse-isostring.js\n    ğŸ“‚ string\n      ğŸ“„ capitalize-first-letter.js\n  ğŸ“‚ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("users")]),e._v("\n    ğŸ“‚ schemas\n      ğŸ“„ user.js\n    ğŸ“‚ repository\n      ğŸ“„ create-user.js\n      ğŸ“„ delete-user.js\n      ğŸ“„ get-user.js\n      ğŸ“„ list-users.js\n      ğŸ“„ update-user.js\n  ğŸ“‚ orders\n    ğŸ“‚ constants\n      ğŸ“„ default-order-type.js\n    ğŸ“‚ schemas\n      ğŸ“„ order.js\n      ğŸ“„ sub-order.js\n    ğŸ“‚ repository\n      ğŸ“„ create-order.js\n      ğŸ“„ delete-order.js\n      ğŸ“„ get-order.js\n      ğŸ“„ list-orders.js\n      ğŸ“„ update-order.js\nğŸ“„ server.js\n")])])]),n("p",[e._v("We might think that "),n("code",[e._v("utils")]),e._v(" and "),n("code",[e._v("common")]),e._v(" are basically the same thing\nin concept, but they are semantically different and the latter is more\nuseful when files are divided by their domains.")]),e._v(" "),n("p",[e._v('As with naming variables and functions, it is a lot easier to read and\nfollow when it is descriptive. I try to name my files as specific to\nits functionality as I can. That way, I can easy find my way around\neasier instead of using "Search in all files" a lot.')]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("Don't be afraid of having "),n("em",[e._v("too")]),e._v(" many files")])])])}),[],!1,null,null,null);s.default=a.exports}}]);